The class stack is implemented with only a List object as a data member, and its member functions rely on those implemented in the List class to perform correctly.  The List class itself is created using Node objects, and its only data member is the head_ptr (Node<T> *) that points to the first element of the list.  The Node class contains two data members -- a templated data member, and a next pointer.
The List class contains functions used by the stack class functions.  The constructor intializes an empty list, with head_ptr set to NULL.  The destructor calls clear(), which deletes all nodes freeing the allocated memory.  The is_empty() function of List uses the value of head_ptr to determine if the list contains any nodes.  This removes the need for a data member to track the node count.  insert_node() and insert_head() are similar functions, but only insert_head() is used in the stack class implementation.  insert_head() creates a new Node, points the new node to the element that was first in the list, and sets head_ptr to point at the new node.  delete_node() and delete_head() are also similar, and again only delete_head() is used in the stack class implementation.  A temporary pointer is directed to the first element of the list, head_ptr is moved to point at the next data member of the first node, and the temporary pointer is used to delete the first element.  clear() calls delete_head() in a while loop until the list is empty.  Finally, get_value() and get_head_value() are similarly implemented, but only get_head_value is used by the stack class with the function top.
